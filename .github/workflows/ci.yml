name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  PUB_ENVIRONMENT: bot.github

jobs:
  # Code Quality & Analysis
  quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: 📁 Checkout repository
        uses: actions/checkout@v4

      - name: 🎯 Setup Dart SDK
        uses: dart-lang/setup-dart@v1
        with:
          sdk: stable

      - name: 📦 Install dependencies
        run: dart pub get

      - name: ✨ Check formatting
        run: dart format --output=none --set-exit-if-changed .

      - name: 🔬 Analyze code
        run: dart analyze --fatal-infos

      - name: 📊 Generate coverage
        run: |
          dart pub global activate coverage
          dart test --coverage=coverage
          dart pub global run coverage:format_coverage --lcov --in=coverage --out=coverage/lcov.info --report-on=lib

      - name: 📈 Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: coverage/lcov.info

  # Unit & Integration Tests
  test:
    name: 🧪 Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        dart-version: [stable, beta]
        exclude:
          # Reduce matrix size - only test beta on Ubuntu
          - os: windows-latest
            dart-version: beta
          - os: macos-latest
            dart-version: beta

    steps:
      - name: 📁 Checkout repository
        uses: actions/checkout@v4

      - name: 🎯 Setup Dart SDK ${{ matrix.dart-version }}
        uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ matrix.dart-version }}

      - name: 📦 Install dependencies
        run: dart pub get

      - name: 🧪 Run tests
        run: dart test --reporter=expanded

      - name: 🔧 Test CLI compilation
        run: dart compile exe bin/unused_code_cleaner.dart -o unused_code_cleaner

      - name: ✅ Test CLI functionality
        run: |
          dart pub global activate --source path .
          dart pub global run unused_code_cleaner --help

  # Flutter Example Testing
  flutter-example:
    name: 📱 Flutter Example
    runs-on: ubuntu-latest

    steps:
      - name: 📁 Checkout repository
        uses: actions/checkout@v4

      - name: 🐦 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: latest
          channel: stable
          cache: true

      - name: 🎯 Setup Dart SDK
        uses: dart-lang/setup-dart@v1
        with:
          sdk: stable

      - name: 📦 Install main package dependencies
        run: dart pub get

      - name: 🎨 Create test assets
        run: |
          mkdir -p example/assets
          echo "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8/5+hHgAHggJ/PchI7wAAAABJRU5ErkJggg==" | base64 -d > example/assets/used.png
          echo "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8/5+hHgAHggJ/PchI7wAAAABJRU5ErkJggg==" | base64 -d > example/assets/unused.png

      - name: 📦 Install Flutter example dependencies
        working-directory: example
        run: flutter pub get

      - name: 🔬 Analyze Flutter example
        working-directory: example
        run: flutter analyze

      - name: 🏗️ Build Flutter example
        working-directory: example
        run: flutter build apk --debug

      - name: 🧹 Test package on Flutter example
        run: dart bin/unused_code_cleaner.dart --path example --dry-run

  # Documentation & Release
  docs-and-release:
    name: 📚 Docs & Release
    runs-on: ubuntu-latest
    needs: [quality, test, flutter-example]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: 📁 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🎯 Setup Dart SDK
        uses: dart-lang/setup-dart@v1
        with:
          sdk: stable

      - name: 📦 Install dependencies
        run: dart pub get

      - name: 📖 Generate documentation
        run: |
          dart pub global activate dartdoc
          dart pub global run dartdoc

      - name: 🏷️ Check for version changes
        id: version-check
        run: |
          CURRENT_VERSION=$(grep '^version:' pubspec.yaml | cut -d' ' -f2)
          git fetch --tags
          if git rev-parse "v$CURRENT_VERSION" >/dev/null 2>&1; then
            echo "Version $CURRENT_VERSION already exists"
            echo "should_release=false" >> $GITHUB_OUTPUT
          else
            echo "New version $CURRENT_VERSION detected"
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          fi

      - name: 🚀 Create Release
        if: steps.version-check.outputs.should_release == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version-check.outputs.version }}
          release_name: Release v${{ steps.version-check.outputs.version }}
          body: |
            ## Changes in v${{ steps.version-check.outputs.version }}

            See [CHANGELOG.md](CHANGELOG.md) for detailed changes.

            ### Installation
            ```bash
            dart pub global activate unused_code_cleaner
            ```

            ### Usage
            ```bash
            unused_code_cleaner --help
            ```
          draft: false
          prerelease: false

  # Security & Dependency Checks
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: 📁 Checkout repository
        uses: actions/checkout@v4

      - name: 🎯 Setup Dart SDK
        uses: dart-lang/setup-dart@v1
        with:
          sdk: stable

      - name: 📦 Install dependencies
        run: dart pub get

      - name: 🔍 Check for outdated dependencies
        run: dart pub outdated --mode=null-safety

      - name: 🛡️ Run dependency audit
        run: dart pub deps

      - name: 📊 Package analysis
        run: |
          dart pub global activate pana
          dart pub global run pana --no-warning || true
